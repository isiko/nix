{ config, pkgs, lib, ... }:

# [x] Git Signing setup

let
  emailConfig = import ./email/config.nix;
  hyprlandConfig = import ./hyprland.nix;
  #pkgs = import <nixos-stable> { config = { allowUnfree = true; }; };
in
{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "isiko404";
  home.homeDirectory = "/home/isiko404";

  imports = [
    ./modules/zsh.nix
    ./modules/git.nix
    ./modules/kanshi.nix
    ./modules/sshAgent.nix
    ./modules/waybar.nix
    ./modules/gtk.nix
    #./modules/spotifyd.nix
  ];

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "23.11"; # Please read the comment before changing.

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = [
    # # Adds the 'hello' command to your environment. It prints a friendly
    # # "Hello, world!" when run.
    # pkgs.hello

    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    # # You can also create simple shell scripts directly inside your
    # # configuration. For example, this adds a command 'my-hello' to your
    # # environment:
    # (pkgs.writeShellScriptBin "my-hello" ''
    #   echo "Hello, ${config.home.username}!"
    # '')
  ];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # You can also manage environment variables but you will have to manually
  # source
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/isiko404/etc/profile.d/hm-session-vars.sh
  #
  # if you don't want to manage your shell through Home Manager.
  home.sessionVariables = {
    EDITOR = "nvim";
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  # E-Mail
  programs.thunderbird = {
      enable = true;
      package = pkgs.thunderbird-bin;
      settings = {
          "mail.identity.default.fcc_reply_follows_parent" = true;
      };
      profiles = {
          "Full" = {
              isDefault = true;
              # settings = {};
              withExternalGnupg = false;
          };
          "KIT" = {
              isDefault = false;
              # settings = {};
              withExternalGnupg = false;
          };
          "Personal" = {
              isDefault = false;
              # settings = {};
              withExternalGnupg = false;
          };
          "Info-AG" = {
              isDefault = false;
              # settings = {};
              withExternalGnupg = false;
          };
      };
  };
  accounts.email = emailConfig;

  programs.btop = {
    enable = true;
    settings = {
      color_theme = "Default";
      theme_background = false;
      truecolor = true;
      force_tty = false;
      vim_keys = true;
      rounded_corners = true;
      graph_symbol = "braille";
      shown_boxes = "proc cpu mem net";
      update_ms = 2000;
      proc_tree = true;
      proc_gradient = false;
      cpu_single_graph = true;
      clock_format = "%H:%M - %d.%m.%y";
      net_download = 1000;
      net_upload = 1000;
      selected_battery = "BAT0";
    };
  };

  programs.eclipse = {
    enable = true;
    package = pkgs.eclipses.eclipse-java;
    plugins = [
      (pkgs.eclipses.plugins.buildEclipseUpdateSite rec {
       name = "programming-lecture-eclipse-artemis-${version}";
       version = "4.7.0";

       src = pkgs.fetchFromGitHub {
       owner = "kit-sdq";
       repo = "programming-lecture-eclipse-artemis";
       rev = "f4d9f9a3af277026e90d31342538c8594cac54ac";
       hash = "sha256-3JHzpSTRrAyN4K0Ph4zNtO8idRezOZhY7O9OwgNM+XA=";
       };

       meta = with lib; {
       homepage = "https://github.com/kit-sdq/programming-lecture-eclipse-artemis";
       description = "Eclipse-Plugin for grading with the artemis project";
       sourceProvenance = with sourceTypes; [binaryBytecode];
       license = licenses.epl20;
       platforms = platforms.all;
       };
       })
    ];
  };

  programs.swaylock = {
    enable = true;
    package = pkgs.swaylock-effects;
    settings = {
      show-keyboard-layout = true;
      indicator = true;
      indicator-caps-lock = true;
      screenshots = true;
      effect-blur = "20x5";
      effect-vignette = "05:05";
    };
  };

  wayland.windowManager.hyprland = hyprlandConfig;

 #wayland.windowManager.sway = {
 #  enable = true;
 #  config = rec {
 #    modifier = "Mod4";
 #    terminal = "alacritty";
 #  };
 #};

}
